name: Git Flow Sync & PR Checks

on:
  pull_request:
    types: [closed, opened, synchronize, reopened]
    branches:
      - main
      - development
  push:
    branches:
      - feature/linting

permissions:
  contents: write
  pull-requests: write

jobs:
  # 1Ô∏è‚É£ Git Flow Sync Job
  sync:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup and Sync
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Get info
          BRANCH="${{ github.event.pull_request.head.ref }}"
          echo "üîç Branch merged to main: $BRANCH"

          # Only allow hotfix/* and release/* to merge into main
          if [[ ! "$BRANCH" =~ ^(hotfix|release)/ ]]; then
            echo "‚ùå INVALID MERGE TO MAIN!"
            echo "‚ùå Branch: $BRANCH"
            echo "‚ùå Only hotfix/* and release/* can merge to main"

            gh issue create \
              --title "üö® Invalid merge to main: $BRANCH" \
              --body "Branch \`$BRANCH\` was merged to main but only hotfix/* and release/* are allowed!" \
              --label "git-flow-violation"

            exit 1
          fi

          echo "‚úÖ Valid branch: $BRANCH"
          echo "üîÑ Starting sync: main ‚Üí development"

          git fetch origin
          git checkout development

          if git merge origin/main -m "Auto-sync: main ‚Üí development after $BRANCH"; then
            echo "‚úÖ Merge successful!"
            if git push origin development; then
              echo "üéâ Successfully synced main to development!"
            else
              echo "‚ùå Push to development failed"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è Merge conflicts detected - creating resolution PR..."

            git merge --abort

            SYNC_BRANCH="sync-conflict-${GITHUB_RUN_NUMBER}"
            git checkout -b $SYNC_BRANCH origin/main
            git push origin $SYNC_BRANCH

            gh pr create \
              --base development \
              --head $SYNC_BRANCH \
              --title "üö® Sync Conflict: main ‚Üí development" \
              --body "Conflicts detected while syncing main to development after $BRANCH merge. Manual resolution needed."

            echo "‚úÖ Conflict resolution PR created"
          fi

  # 2Ô∏è‚É£ PR Checks Job
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/feature/linting'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm i --force

      - name: Run ESLint
        run: npm run lint

      - name: Comment on PR if checks fail
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('‚ùå Code quality checks failed')
            );

            const message = `‚ùå **Code quality checks failed**

            The following checks failed:
            - ESLint linting

            Please fix the issues and push your changes. You can run the following commands locally to check:
            \`\`\`bash
            npm run lint
            \`\`\`

            Once all checks pass, this PR will be ready for review.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            }